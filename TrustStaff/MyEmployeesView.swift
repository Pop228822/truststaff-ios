import SwiftUI
import KeychainAccess

struct MyEmployeesView: View {
    @State private var employees: [EmployeeResponse] = []
    @State private var isLoading = true
    @State private var errorMessage: String?
    @State private var deletingRecordID: Int?
    @State private var isDeleting = false
    
    @Environment(\.dismiss) private var dismiss
    

    var body: some View {
            Group {
                if isLoading {
                    ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
                } else if let errorMessage = errorMessage {
                    Text("–û—à–∏–±–∫–∞: \(errorMessage)").foregroundColor(.red)
                } else if employees.isEmpty {
                    Text("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
                        .foregroundColor(.gray)
                } else {
                    List(employees) { employee in
                        Section {
                            VStack(alignment: .leading, spacing: 6) {
                                Text(employee.full_name).font(.headline)
                                Text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: \(employee.birth_date)").font(.subheadline)

                                if let contact = employee.contact, !contact.isEmpty {
                                    Text("–ö–æ–Ω—Ç–∞–∫—Ç: \(contact)").font(.subheadline)
                                }

                                Text("üîé –ó–∞–ø–∏—Å–µ–π: \(employee.record_count)")
                                    .font(.footnote).foregroundColor(.gray)

                                ForEach(employee.records, id: \.id) { r in
                                    VStack(alignment: .leading, spacing: 2) {
                                        if let p = r.position     { Text("üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: \(p)") }
                                        if let h = r.hired_at     { Text("üü¢ –ü—Ä–∏–Ω—è—Ç: \(h)") }
                                        if let f = r.fired_at     { Text("üî¥ –£–≤–æ–ª–µ–Ω: \(f)") }
                                        if let m = r.misconduct   { Text("‚ö† –ù–∞—Ä—É—à–µ–Ω–∏–µ: \(m)").foregroundColor(.red) }
                                        if let c = r.commendation { Text("üëç –ü–æ—Ö–≤–∞–ª–∞: \(c)").foregroundColor(.green) }

                                        Button(role: .destructive) {
                                            deletingRecordID = r.id
                                            Task {
                                                await performDelete(recordID: r.id)
                                            }
                                        } label: {
                                            Label("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", systemImage: "trash")
                                        }
                                    }
                                    .padding(6)
                                    .background(Color.gray.opacity(0.05))
                                    .cornerRadius(6)
                                }
                            }

                            // üîπ –ü–µ—Ä–µ—Ö–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ, –±–µ–∑ HStack
                            NavigationLink(destination: AddRecordView(employeeID: employee.id)) {
                                Label("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", systemImage: "plus")
                            }

                            NavigationLink(destination: GenerateConsentView(employee: employee)) {
                                Label("üìÑ –°–æ–≥–ª–∞—Å–∏–µ", systemImage: "doc")
                            }

                        } header: {
                            Text("üßë‚Äçüíº \(employee.full_name)")
                        }
                    }
                }
            }
            .navigationTitle("–ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
            .navigationBarBackButtonHidden(true)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button(action: {
                        dismiss()
                    }) {
                        HStack {
                            Image(systemName: "chevron.left")
                            Text("–ù–∞–∑–∞–¥")
                        }
                    }
                }
            }
            .onAppear(perform: loadEmployees)
    }
    
    @MainActor
    func performDelete(recordID: Int) async {
        guard !isDeleting else {
            print("‚õîÔ∏è –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è")
            return
        }

        isDeleting = true
        print("üü¢ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ ID:", recordID)

        await deleteRecord(recordID: recordID)

        isDeleting = false
        deletingRecordID = nil
    }

    func loadEmployees() {
        guard let url = URL(string: "https://app.truststaff.ru/api/employees/") else {
            errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
            isLoading = false
            return
        }

        let keychain = Keychain(service: "ru.truststaff.app")
        let token = (try? keychain.get("accessToken")) ?? ""

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                isLoading = false

                if let error = error {
                    errorMessage = error.localizedDescription
                    return
                }

                guard let data = data else {
                    errorMessage = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    return
                }

                do {
                    print("üëÄ RAW:", String(data: data, encoding: .utf8) ?? "N/A")
                    employees = try JSONDecoder().decode([EmployeeResponse].self, from: data)
                } catch {
                    errorMessage = "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)"
                }
            }
        }.resume()
    }
    
    func deleteRecord(recordID: Int) async {
        print("üöÄ deleteRecord –≤—ã–∑–≤–∞–Ω –¥–ª—è ID:", recordID)
        guard let url = URL(string: "https://app.truststaff.ru/api/records/\(recordID)/delete") else {
            errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
            return
        }

        let keychain = Keychain(service: "ru.truststaff.app")
        let token = (try? keychain.get("accessToken")) ?? ""

        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        do {
            let (data, response) = try await URLSession.shared.data(for: request)

            guard let httpResponse = response as? HTTPURLResponse else {
                errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                return
            }

            if httpResponse.statusCode == 200 {
                for i in employees.indices {
                    if let index = employees[i].records.firstIndex(where: { $0.id == recordID }) {
                        employees[i].records.remove(at: index)
                        break
                    }
                }
            } else {
                let msg = String(data: data, encoding: .utf8) ?? "–û—à–∏–±–∫–∞"
                errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: \(msg)"
            }

        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: \(error.localizedDescription)"
        }

        deletingRecordID = nil
    }
}
