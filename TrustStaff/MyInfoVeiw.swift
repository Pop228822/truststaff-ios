import SwiftUI
import KeychainAccess

struct MeResponse: Decodable {
    let id: Int
    let name: String
    let email: String
    let is_approved: Bool?
    let company_name: String?
    let city: String?
    let inn_or_ogrn: String?
    let verification_status: String
    let passport_filename: String?
    let employee_count: Int
}

struct MyInfoView: View {
    @EnvironmentObject var appViewModel: AppViewModel
    @Environment(\.dismiss) private var dismiss

    @State private var me: MeResponse?
    @State private var shouldRedirect = false
    @State private var isLoading = false

    var body: some View {
        VStack(spacing: 20) {
            Text("–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
                .font(.title).bold()

            if let me {
                Group {
                    row(label: "üë§ –ò–º—è", value: me.name)
                    row(label: "üìß –ü–æ—á—Ç–∞", value: me.email)
                    row(label: "üè¢ –ö–æ–º–ø–∞–Ω–∏—è", value: me.company_name ?? "‚Äî")
                    row(label: "üìç –ì–æ—Ä–æ–¥", value: me.city ?? "‚Äî")
                    row(label: "üÜî –ò–ù–ù/–û–ì–†–ù", value: me.inn_or_ogrn ?? "‚Äî")
                    row(label: "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", value: me.verification_status.capitalized, color: (me.is_approved ?? false) ? .green : .orange)
                    row(label: "üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", value: "\(me.employee_count)")
                }
            } else if isLoading {
                ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
            } else {
                Text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                    .foregroundColor(.red)
            }

            Button("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞") {
                appViewModel.logout()
                shouldRedirect = true
            }
            .buttonStyle(.borderedProminent)
            .tint(.red)

            Spacer()
        }
        .padding()
        .navigationBarBackButtonHidden(true)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button(action: {
                    dismiss()
                }) {
                    HStack {
                        Image(systemName: "chevron.left")
                        Text("–ù–∞–∑–∞–¥")
                    }
                }
            }
        }
        .onAppear {
            Task { await fetchMe() }
        }
        .navigationDestination(isPresented: $shouldRedirect) {
            LoginView()
                .navigationBarBackButtonHidden(true)
        }
    }

    // MARK: - UI Row
    func row(label: String, value: String, color: Color = .gray) -> some View {
        HStack {
            Text(label)
            Spacer()
            Text(value)
                .foregroundColor(color)
        }
        .padding(.horizontal)
    }

    // MARK: - API
    func fetchMe() async {
        isLoading = true
        defer { isLoading = false }

        guard
            let token = (try? Keychain(service: "ru.truststaff.app").get("accessToken")) ?? nil,
            let url = URL(string: "https://app.truststaff.ru/api/me")
        else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π URL")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: \((response as? HTTPURLResponse)?.statusCode ?? 0)")
                return
            }
            
            if httpResponse.statusCode == 401 {
                print("üîí –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω?")
                appViewModel.logout()
                shouldRedirect = true
                return
            }

            do {
                let decoded = try JSONDecoder().decode(MeResponse.self, from: data)
                DispatchQueue.main.async {
                    self.me = decoded
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", error)
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                print(String(data: data, encoding: .utf8) ?? "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error)
        }
    }
}
